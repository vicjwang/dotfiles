---
description:
globs:
alwaysApply: false
---
# Generating RedwoodJS Scenario Files

This rule outlines best practices and structure for creating scenario files in a RedwoodJS project. Scenario files are used to seed your database with consistent data for testing.

## Key Guidelines

1.  **Structure with `defineScenario`**: All scenarios are defined within an object exported as `standard` (or other named exports for different scenario sets) using the `defineScenario` function.
2.  **Source Table**: Always include a `source` table scenario, as this is often a foundational piece of data.
3.  **Use `connect` for Foreign Keys**: When establishing relationships, prefer using the `connect` syntax on the relation field rather than directly assigning scalar foreign key values. This makes relationships more explicit.
    Example: Instead of `authorId: 1`, use `author: { connect: { id: 1 } }`.
4.  **Primary Keys in Definitions**:
    *   For tables with auto-incrementing primary keys (e.g., `id`, `ticker_id` in the `ticker` table), do not specify the primary key field in the `data` object. Prisma will handle its generation.
    *   You can then refer to these records implicitly by their scenario key or by other unique fields when using `connect` from other tables.
5.  **`optionchain` Table Specifics**:
    *   Do not include a `dataSource` field directly in the `optionchain` table data within scenarios.
6.  **Database Cleaning (`beforeEach`)**:
    *   RedwoodJS's testing utilities typically handle cleaning the relevant database tables before applying a scenario's data. You usually don't need to write explicit `beforeEach` cleanup hooks *within the scenario file itself* for this purpose.
    *   If you have more complex, test-specific setup that needs to run before scenarios, that would go into the `beforeEach` of your actual test file (e.g., `*.test.ts`).

## Example Scenario File

```typescript
import type { Prisma } from '@prisma/client'
// Example: If your ticker model has a unique 'ticker' string field (e.g. "AAPL")
// and its primary key is an auto-generated 'id' or 'ticker_id'.

export const standard = defineScenario({
  // 1. Source Table (Mandatory Example)
  source: {
    primarySource: {
      data: {
        // source_id is likely auto-generated if PK, otherwise set it.
        // For this example, let's assume source_id is a manually set PK or unique key.
        source_id: 1,
        source: 'TestSourceSystem',
      },
    },
  },

  // 2. Category Table (Example)
  category: {
    technology: {
      data: {
        // cat_id is likely auto-generated if PK. If manually set unique key:
        cat_id: 10,
        category: 'Technology',
      },
    },
    finance: {
      data: {
        cat_id: 20,
        category: 'Financial Services',
      },
    },
  },

  // 3. Ticker Table
  // Rule: No "ticker_id" (if it's an auto-generated PK) in the ticker table data.
  // 'ticker' (the symbol like 'AAPL') is assumed to be a unique business key.
  ticker: {
    aapl: {
      data: {
        ticker: 'AAPL', // Unique business key
        name: 'Apple Inc.',
        // ticker_id (PK) is auto-generated by Prisma
        category: {
          connect: { cat_id: 10 }, // Connect to category 'technology' using its cat_id
        },
      },
    },
    spy: {
      data: {
        ticker: 'SPY',
        name: 'SPDR S&P 500 ETF',
        category: {
          connect: { cat_id: 20 }, // Connect to category 'finance'
        },
      },
    },
  },

  // 4. OptionChain Table
  // Rule: Use "connect" for foreign keys.
  // Rule: No "dataSource" in optionchain table.
  optionchain: {
    aapl_call_150_dec2024: {
      data: {
        // strike_id is primary key for optionchain in this example, not auto-generated
        strike_id: 5001,
        expirdate: new Date('2024-12-20'),
        tradedate: new Date('2024-01-15'), // The date this option data was recorded
        strike: new Prisma.Decimal(150),
        option_type: 'CALL',
        // spotprice, iv, greeks etc.
        spotprice: new Prisma.Decimal(145.50),
        callmidiv: new Prisma.Decimal(0.28),
        // NO 'dataSource' field here

        // Foreign key to Ticker table using 'connect'
        // Assumes 'OptionChain' model has a relation field named 'tickerRelation' (or similar) to 'Ticker' model
        // And we connect via the 'ticker' unique string field on the 'Ticker' model.
        tickerRelation: { // Adjust 'tickerRelation' to your actual Prisma schema relation field name
          connect: {
            ticker: 'AAPL', // Connects to the 'aapl' scenario in the 'ticker' table
          },
        },
        // Other fields for optionchain...
      },
    },
    spy_put_400_jun2024: {
      data: {
        strike_id: 5002,
        expirdate: new Date('2024-06-21'),
        tradedate: new Date('2024-01-15'),
        strike: new Prisma.Decimal(400),
        option_type: 'PUT',
        spotprice: new Prisma.Decimal(410.00),
        putmidiv: new Prisma.Decimal(0.22),
        // NO 'dataSource' field

        tickerRelation: { // Adjust 'tickerRelation' to your actual Prisma schema relation field name
          connect: {
            ticker: 'SPY',
          },
        },
      },
    },
  },

  // Example: Price table connecting to Ticker
  price: {
    aapl_jan15: {
      data: {
        // id for price is auto-generated
        close: new Prisma.Decimal(145.50),
        tradedate: new Date('2024-01-15'),
        ticker: { // Relation field on Price model to Ticker model
          connect: {
            ticker: 'AAPL', // Connect via the unique 'ticker' string
          },
        },
      },
    },
  },
  // Define other related tables as needed, following the same patterns.
})

/*
Note on foreign key connections:
The `connect` object should use a unique field from the related table.
For example, `category: { connect: { cat_id: 10 } }` assumes `cat_id` is unique on the Category table.
`tickerRelation: { connect: { ticker: 'AAPL' } }` assumes `ticker` (e.g., "AAPL") is a unique string field on the Ticker table.
Adjust the field names in `connect` (e.g., `cat_id`, `ticker`) and the relation field name (e.g. `tickerRelation`)
to match your actual Prisma schema definition.
*/
```

This rule should help in standardizing the creation of scenario files.
